// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum AccountRole {
  WAITING
  FREELANCE
  ADMIN
  
}
enum Type {
  SUBSIDI
  KOMERSIL
  KOST
  SEWA
}
enum Status {
  FOLLOWUP
  ONPROCESS
  SUCCESS
  CANCEL
}
  
enum Status_ {
  OPEN
  TERLARIS
  TERBARU
  FAVORIT
  FLASHSALE
}

// model Account {
//   id                 String  @id @default(cuid())
//   name          String
//   email         String   @unique
//   whatsup       String   @unique
//   payout        Int @default(0)
//   password      String?
//   role          AccountRole @default(WAITING)
//   customers      Customer[]
//   type               String @default("email")
//   provider           String @default("gmail")
//   providerAccountId  String 
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   @@unique([provider, providerAccountId])
// }
model User {
  id            String    @id @default(uuid())
  name          String?   
  email         String?   @unique
  emailVerified DateTime? 
  whatsup       String?   @unique
  payout        Int @default(0)
  password      String?
  role          AccountRole @default(WAITING)
  image         String?
  customers     Customer[]   
  accounts      Account[] 
  sessions      Session[] 
}

model Account {
  id                 String   @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Customer {
  id          String @id @default(uuid())
  userId      String
  name        String
  whatsup     String @unique
  email       String
  status      Status @default(FOLLOWUP)
  // produk      Produk[]
  createdAt   DateTime @default(now())
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  
  products      Product[]  @relation("CustomerToProduct")
}


model Product {
  id          String @id @default(uuid())
  type  Type @default(SUBSIDI)
  status  Status_ @default(OPEN)
  district        String  @default("Poasia")
  name        String @unique
  rating Decimal
  address        String 
  price     Decimal 
  discountFrom     Decimal 
  fee     Decimal 
  image String
  fb     String 
  tiktok String
  createdAt   DateTime @default(now())
   customers   Customer[] @relation("CustomerToProduct")
}


// model PasswordResetToken {
//   id String @id @default(cuid())
//   email String
//   token String @unique
//   expires DateTime

//   @@unique([email, token])
// }

